@model bug_tracker.Models.DashboardViewModel

@{
    ViewBag.Title = "Home Page";
}

<div class="row p-t-40">
    <div class="col-md-12">
        <div class="card card-inverse card-flat border-none">
            <div class="card-block p-b-10">
                <div class="row p-t-10 p-b-15">
                    <!-- Unassigned Tickets -->

                    <div class="col-lg-3 col-sm-6 text-danger-a300 p-l-30 p-r-40 mb-5 mb-sm-5 mb-lg-0 br-grey-100 br-lg br-dashed no-b-xs no-b-sm">
                        <div class="row">
                            <div class="col-md-8 col-8">
                                <h4 class="text-uppercase text-muted no-m">Unassigned Tickets</h4>
                            </div>
                            <div class="col-md-4 col-4 no-p text-right">
                                <i class="icon-ticket2 x6 text-grey-100 m-t-15"></i>
                            </div>
                        </div>
                        <div class="row">
                            <div class="x6 no-p no-m m-t-10 m-b-10">@Model.Tickets.Where(t => t.AssignedToUser == null).Count()</div>
                         </div>
                     </div>
                    <!-- /Unassigned Tickets -->
                    <!-- Urgent Tickets -->
                    <div class="col-lg-3 col-sm-6 text-success-a300 p-l-30 p-r-40 mb-5 mb-sm-5 mb-lg-0 br-grey-100 br-lg br-dashed no-b-xs no-b-sm">
                        <div class="row">
                            <div class="col-md-8 col-8">
                                <h4 class="text-uppercase text-muted no-m">Urgent Tickets</h4>
                                @*<div class="x6 no-p no-m m-t-10 m-b-10">@Model.Tickets.Where(t => t.TicketPriority.Name == "Urgent" || t.TicketPriority.Name == "High").Count()</div>*@
                            </div>
                            <div class="col-md-4 col-4 no-p text-right">
                                <i class="icon-ticket3 x6 text-grey-100 m-t-15"></i>
                            </div>
                        </div>
                        <div class="row">
                            <div class="x6 no-p no-m m-t-10 m-b-10" >@Model.Tickets.Where(t => t.TicketPriority.Name == "Urgent").Count()</div>
                        </div>
                    </div>
                    <!-- /Urgent Tickets -->
                    <!-- New Tickets -->
                    <div class="col-lg-3 col-sm-6 text-info p-l-30 p-r-40 mb-5 mb-sm-0 br-grey-100 br-lg br-dashed no-b-xs">
                        <div class="row">
                            <div class="col-md-8 col-8">
                                <h4 class="text-uppercase text-muted no-m">New Tickets</h4>
                                @*<div class="x6 no-p no-m m-t-10 m-b-10">@Model.Tickets.Where(t => t.TicketStatus.Name == "New").Count()</div>*@
                            </div>
                            <div class="col-md-4 col-4 no-p text-right">
                                <i class="icon-ticket4 x6 text-grey-100 m-t-15"></i>
                            </div>
                        </div>
                        <div class="row">
                            <div class="x6 no-p no-m m-t-10 m-b-10">@Model.Tickets.Where(t => t.TicketStatus.Name == "New").Count()</div>
                        </div>
                    </div>
                    <!-- /New Tickets -->
                    <!-- Software Updates -->
                    <div class="col-lg-3 col-sm-6 text-warning p-l-30 p-r-40">
                        <div class="row">
                            <div class="col-md-8 col-8">
                                <h4 class="text-uppercase text-muted no-m">Pending Software Updates</h4>
                                @*<div class="x6 no-p no-m m-t-10 m-b-10">@Model.Tickets.Where(t => t.TicketType.Name == "Software Update").Count()</div>*@
                            </div>
                            <div class="col-md-4 col-4 no-p text-right">
                                <i class="icon-coder-head x6 text-grey-100 m-t-15"></i>
                            </div>
                        </div>
                        <div class="row">
                            <div class="x6 no-p no-m m-t-10 m-b-10">@Model.Tickets.Where(t => t.TicketType.Name == "Software Update").Count()</div>
                        </div>
                    </div>
                    <!-- /Software Updates -->

                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <!-- Left col -->
        <!-- Custom tabs (Charts with tabs)-->
        <div class="card card-inverse card-flat bg-light min-width-300 min-height-300">
            <div class="card-header">
                <h3 style="color: black;">Tickets by Priority</h3>
            </div>
            <div>
                <div style="margin-top: 25px;">
                    <canvas id="barChart1" style="min-width: 100%; min-height: 100%; margin-bottom: 25px;"></canvas>
                </div>
            </div>
            <!-- /.card-body -->
        </div>
    </div>
    <div class="col-md-4">
        <!-- Left col -->
        <!-- Custom tabs (Charts with tabs)-->
        <div class="card card-inverse card-flat bg-light min-width-300 min-height-300">
            <div class="card-header">
                <h3 style="color: black;">Tickets by Type</h3>
            </div>
            <div>
                <div style="margin-top: 25px;">
                    <canvas id="barChart2" style="min-width: 100%; min-height: 100%; margin-bottom: 25px;"></canvas>
                </div>
            </div>
            <!-- /.card-body -->
        </div>
    </div>
    <div class="col-md-4">
        <!-- Left col -->
        <!-- Custom tabs (Charts with tabs)-->
        <div class="card card-inverse card-flat bg-light min-width-300 min-height-300">
            <div class="card-header">
                <h3 style="color: black;">Tickets by Status</h3>
            </div>
            <div>
                <div style="margin-top: 25px;">
                    <canvas id="barChart3" style="min-width: 100%; min-height: 100%; margin-bottom: 25px;"></canvas>
                </div>
            </div>
            <!-- /.card-body -->
        </div>
    </div>
</div>
<div class="row">
    <!-- Recent Leads -->
    <div class="col-lg-12">
        <div class="card card-inverse card-flat">
            <div class="card-header">
                <h5 class="card-title">Recent Tickets</h5>
            </div>
            <div class="table-responsive">
                <table class="table datatable-reorder-realtime">
                    <thead>
                        <tr>
                            <th>Project Name</th>
                            <th>Submitter</th>
                            <th>Priority</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var ticket in Model.Tickets)
                        {
                            <tr>
                                <td>
                                    @ticket.Project.Name
                                </td>
                                <td>
                                    <p>@ticket.OwnerUser.FirstName @ticket.OwnerUser.LastName</p>
                                </td>
                                <td>
                                    @ticket.TicketPriority.Name
                                </td>
                                <td>
                                    @ticket.TicketStatus.Name
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <!-- /Recent Leads -->
</div>

<div class="row">
    <div class="col-lg-12">

    </div>
</div>

@section scripts{
    <script>
        $(function () {
            let url = '@Url.Action("GetBarData", "Charts", new { property = "Priority"})';
            $.post(url).then(function (response) {
                var barChartCanvas = $('#barChart1').get(0).getContext('2d');
                new Chart(barChartCanvas, {
                    type: 'bar',
                    data: {
                        labels: response.Labels,
                        datasets: [{
                            label: 'High Priority',
                            data: response.Data,
                            backgroundColor: [
                                'rgba(204, 0, 0, 1)',
                                'rgba(235, 224, 20, 1)',
                                'rgba(44, 164, 14, 1)'
                            ],
                            borderColor: [
                                'rgba(60,141,188,0.8)',
                                'rgba(60,141,188,0.8)',
                                'rgba(60,141,188,0.8)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                })
          });
        });
         $(function () {
            let url = '@Url.Action("GetBarData", "Charts", new { property = "Type"})';
             $.post(url).then(function (response) {
                 var barChartCanvas = $('#barChart2').get(0).getContext('2d');
                 new Chart(barChartCanvas, {
                     type: 'bar',
                     data: {
                         labels: response.Labels,
                         datasets: [{
                             label: 'Tickets by Type',
                             data: response.Data,
                             backgroundColor: [
                                 'rgba(60,141,188,0.9)',
                                 'rgba(210, 214, 222, 1)',
                                 'rgba(63,141,128,0.8)',
                                 'rgba(60,141,188,0.8)',
                                 'rgba(60,141,188,0.8)'
                             ],
                             borderColor: [
                                 'rgba(60,141,188,0.8)',
                                 'rgba(60,141,188,0.8)',
                                 'rgba(60,141,188,0.8)',
                                 'rgba(60,141,188,0.8)',
                                 'rgba(60,141,188,0.8)'
                             ],
                             borderWidth: 1
                         }]
                     },
                     options: {
                         scales: {
                             yAxes: [{
                                 ticks: {
                                     beginAtZero: true
                                 }
                             }]
                         }
                     }
                 })
              });
         });
        $(function () {
            let url = '@Url.Action("GetBarData", "Charts", new { property = "Status"})';
            $.post(url).then(function (response) {
                var barChartCanvas = $('#barChart3').get(0).getContext('2d');
                new Chart(barChartCanvas, {
                    type: 'doughnut',
                    data: {
                        labels: response.Labels,
                        datasets: [{
                            label: "Tickets by status",
                            data: response.Data,
                            backgroundColor: [
                                'rgba(60,141,188,0.9)',
                                'rgba(210, 214, 222, 1)',
                                'rgba(60,141,188,0.8)',
                                'rgba(60,141,188,0.8)',
                                'rgba(60,141,188,0.8)'
                            ],
                            borderColor: [
                                'rgba(60,141,188,0.8)',
                                'rgba(60,141,188,0.8)',
                                'rgba(60,141,188,0.8)',
                                'rgba(60,141,188,0.8)',
                                'rgba(60,141,188,0.8)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{ gridLines: false, labels: false,
                                ticks: {
                                    display: false,
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                })
            });
        });
    </script>
}